// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.31.1
// source: shell_provider.proto

package shell_provider

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShellProvider_SendCommand_FullMethodName = "/shell_provider.ShellProvider/SendCommand"
)

// ShellProviderClient is the client API for ShellProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShellProviderClient interface {
	// SendCommand sends a command to a fake shell
	SendCommand(ctx context.Context, in *SendCommandRequest, opts ...grpc.CallOption) (*SendCommandResponse, error)
}

type shellProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewShellProviderClient(cc grpc.ClientConnInterface) ShellProviderClient {
	return &shellProviderClient{cc}
}

func (c *shellProviderClient) SendCommand(ctx context.Context, in *SendCommandRequest, opts ...grpc.CallOption) (*SendCommandResponse, error) {
	out := new(SendCommandResponse)
	err := c.cc.Invoke(ctx, ShellProvider_SendCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShellProviderServer is the server API for ShellProvider service.
// All implementations must embed UnimplementedShellProviderServer
// for forward compatibility
type ShellProviderServer interface {
	// SendCommand sends a command to a fake shell
	SendCommand(context.Context, *SendCommandRequest) (*SendCommandResponse, error)
	mustEmbedUnimplementedShellProviderServer()
}

// UnimplementedShellProviderServer must be embedded to have forward compatible implementations.
type UnimplementedShellProviderServer struct {
}

func (UnimplementedShellProviderServer) SendCommand(context.Context, *SendCommandRequest) (*SendCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommand not implemented")
}
func (UnimplementedShellProviderServer) mustEmbedUnimplementedShellProviderServer() {}

// UnsafeShellProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShellProviderServer will
// result in compilation errors.
type UnsafeShellProviderServer interface {
	mustEmbedUnimplementedShellProviderServer()
}

func RegisterShellProviderServer(s grpc.ServiceRegistrar, srv ShellProviderServer) {
	s.RegisterService(&ShellProvider_ServiceDesc, srv)
}

func _ShellProvider_SendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShellProviderServer).SendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShellProvider_SendCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShellProviderServer).SendCommand(ctx, req.(*SendCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShellProvider_ServiceDesc is the grpc.ServiceDesc for ShellProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShellProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shell_provider.ShellProvider",
	HandlerType: (*ShellProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCommand",
			Handler:    _ShellProvider_SendCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shell_provider.proto",
}
