// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Requester is an object representing the database table.
type Requester struct {
	ID        int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	FirstName string      `boil:"first_name" json:"first_name" toml:"first_name" yaml:"first_name"`
	LastName  string      `boil:"last_name" json:"last_name" toml:"last_name" yaml:"last_name"`
	Email     string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	Phone     null.String `boil:"phone" json:"phone,omitempty" toml:"phone" yaml:"phone,omitempty"`

	R *requesterR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L requesterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RequesterColumns = struct {
	ID        string
	FirstName string
	LastName  string
	Email     string
	Phone     string
}{
	ID:        "id",
	FirstName: "first_name",
	LastName:  "last_name",
	Email:     "email",
	Phone:     "phone",
}

var RequesterTableColumns = struct {
	ID        string
	FirstName string
	LastName  string
	Email     string
	Phone     string
}{
	ID:        "requesters.id",
	FirstName: "requesters.first_name",
	LastName:  "requesters.last_name",
	Email:     "requesters.email",
	Phone:     "requesters.phone",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var RequesterWhere = struct {
	ID        whereHelperint
	FirstName whereHelperstring
	LastName  whereHelperstring
	Email     whereHelperstring
	Phone     whereHelpernull_String
}{
	ID:        whereHelperint{field: "\"requesters\".\"id\""},
	FirstName: whereHelperstring{field: "\"requesters\".\"first_name\""},
	LastName:  whereHelperstring{field: "\"requesters\".\"last_name\""},
	Email:     whereHelperstring{field: "\"requesters\".\"email\""},
	Phone:     whereHelpernull_String{field: "\"requesters\".\"phone\""},
}

// RequesterRels is where relationship names are stored.
var RequesterRels = struct {
	Requests string
}{
	Requests: "Requests",
}

// requesterR is where relationships are stored.
type requesterR struct {
	Requests RequestSlice `boil:"Requests" json:"Requests" toml:"Requests" yaml:"Requests"`
}

// NewStruct creates a new relationship struct
func (*requesterR) NewStruct() *requesterR {
	return &requesterR{}
}

func (r *requesterR) GetRequests() RequestSlice {
	if r == nil {
		return nil
	}
	return r.Requests
}

// requesterL is where Load methods for each relationship are stored.
type requesterL struct{}

var (
	requesterAllColumns            = []string{"id", "first_name", "last_name", "email", "phone"}
	requesterColumnsWithoutDefault = []string{"first_name", "last_name", "email"}
	requesterColumnsWithDefault    = []string{"id", "phone"}
	requesterPrimaryKeyColumns     = []string{"id"}
	requesterGeneratedColumns      = []string{}
)

type (
	// RequesterSlice is an alias for a slice of pointers to Requester.
	// This should almost always be used instead of []Requester.
	RequesterSlice []*Requester
	// RequesterHook is the signature for custom Requester hook methods
	RequesterHook func(context.Context, boil.ContextExecutor, *Requester) error

	requesterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	requesterType                 = reflect.TypeOf(&Requester{})
	requesterMapping              = queries.MakeStructMapping(requesterType)
	requesterPrimaryKeyMapping, _ = queries.BindMapping(requesterType, requesterMapping, requesterPrimaryKeyColumns)
	requesterInsertCacheMut       sync.RWMutex
	requesterInsertCache          = make(map[string]insertCache)
	requesterUpdateCacheMut       sync.RWMutex
	requesterUpdateCache          = make(map[string]updateCache)
	requesterUpsertCacheMut       sync.RWMutex
	requesterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var requesterAfterSelectHooks []RequesterHook

var requesterBeforeInsertHooks []RequesterHook
var requesterAfterInsertHooks []RequesterHook

var requesterBeforeUpdateHooks []RequesterHook
var requesterAfterUpdateHooks []RequesterHook

var requesterBeforeDeleteHooks []RequesterHook
var requesterAfterDeleteHooks []RequesterHook

var requesterBeforeUpsertHooks []RequesterHook
var requesterAfterUpsertHooks []RequesterHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Requester) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requesterAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Requester) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requesterBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Requester) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requesterAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Requester) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requesterBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Requester) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requesterAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Requester) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requesterBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Requester) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requesterAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Requester) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requesterBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Requester) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range requesterAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRequesterHook registers your hook function for all future operations.
func AddRequesterHook(hookPoint boil.HookPoint, requesterHook RequesterHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		requesterAfterSelectHooks = append(requesterAfterSelectHooks, requesterHook)
	case boil.BeforeInsertHook:
		requesterBeforeInsertHooks = append(requesterBeforeInsertHooks, requesterHook)
	case boil.AfterInsertHook:
		requesterAfterInsertHooks = append(requesterAfterInsertHooks, requesterHook)
	case boil.BeforeUpdateHook:
		requesterBeforeUpdateHooks = append(requesterBeforeUpdateHooks, requesterHook)
	case boil.AfterUpdateHook:
		requesterAfterUpdateHooks = append(requesterAfterUpdateHooks, requesterHook)
	case boil.BeforeDeleteHook:
		requesterBeforeDeleteHooks = append(requesterBeforeDeleteHooks, requesterHook)
	case boil.AfterDeleteHook:
		requesterAfterDeleteHooks = append(requesterAfterDeleteHooks, requesterHook)
	case boil.BeforeUpsertHook:
		requesterBeforeUpsertHooks = append(requesterBeforeUpsertHooks, requesterHook)
	case boil.AfterUpsertHook:
		requesterAfterUpsertHooks = append(requesterAfterUpsertHooks, requesterHook)
	}
}

// One returns a single requester record from the query.
func (q requesterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Requester, error) {
	o := &Requester{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for requesters")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Requester records from the query.
func (q requesterQuery) All(ctx context.Context, exec boil.ContextExecutor) (RequesterSlice, error) {
	var o []*Requester

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Requester slice")
	}

	if len(requesterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Requester records in the query.
func (q requesterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count requesters rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q requesterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if requesters exists")
	}

	return count > 0, nil
}

// Requests retrieves all the request's Requests with an executor.
func (o *Requester) Requests(mods ...qm.QueryMod) requestQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"requests\".\"requester_id\"=?", o.ID),
	)

	return Requests(queryMods...)
}

// LoadRequests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (requesterL) LoadRequests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRequester interface{}, mods queries.Applicator) error {
	var slice []*Requester
	var object *Requester

	if singular {
		object = maybeRequester.(*Requester)
	} else {
		slice = *maybeRequester.(*[]*Requester)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &requesterR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &requesterR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`requests`),
		qm.WhereIn(`requests.requester_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load requests")
	}

	var resultSlice []*Request
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice requests")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on requests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for requests")
	}

	if len(requestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Requests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &requestR{}
			}
			foreign.R.Requester = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RequesterID) {
				local.R.Requests = append(local.R.Requests, foreign)
				if foreign.R == nil {
					foreign.R = &requestR{}
				}
				foreign.R.Requester = local
				break
			}
		}
	}

	return nil
}

// AddRequests adds the given related objects to the existing relationships
// of the requester, optionally inserting them as new records.
// Appends related to o.R.Requests.
// Sets related.R.Requester appropriately.
func (o *Requester) AddRequests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Request) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RequesterID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"requests\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"requester_id"}),
				strmangle.WhereClause("\"", "\"", 2, requestPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RequesterID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &requesterR{
			Requests: related,
		}
	} else {
		o.R.Requests = append(o.R.Requests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &requestR{
				Requester: o,
			}
		} else {
			rel.R.Requester = o
		}
	}
	return nil
}

// SetRequests removes all previously related items of the
// requester replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Requester's Requests accordingly.
// Replaces o.R.Requests with related.
// Sets related.R.Requester's Requests accordingly.
func (o *Requester) SetRequests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Request) error {
	query := "update \"requests\" set \"requester_id\" = null where \"requester_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Requests {
			queries.SetScanner(&rel.RequesterID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Requester = nil
		}
		o.R.Requests = nil
	}

	return o.AddRequests(ctx, exec, insert, related...)
}

// RemoveRequests relationships from objects passed in.
// Removes related items from R.Requests (uses pointer comparison, removal does not keep order)
// Sets related.R.Requester.
func (o *Requester) RemoveRequests(ctx context.Context, exec boil.ContextExecutor, related ...*Request) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RequesterID, nil)
		if rel.R != nil {
			rel.R.Requester = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("requester_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Requests {
			if rel != ri {
				continue
			}

			ln := len(o.R.Requests)
			if ln > 1 && i < ln-1 {
				o.R.Requests[i] = o.R.Requests[ln-1]
			}
			o.R.Requests = o.R.Requests[:ln-1]
			break
		}
	}

	return nil
}

// Requesters retrieves all the records using an executor.
func Requesters(mods ...qm.QueryMod) requesterQuery {
	mods = append(mods, qm.From("\"requesters\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"requesters\".*"})
	}

	return requesterQuery{q}
}

// FindRequester retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRequester(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Requester, error) {
	requesterObj := &Requester{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"requesters\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, requesterObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from requesters")
	}

	if err = requesterObj.doAfterSelectHooks(ctx, exec); err != nil {
		return requesterObj, err
	}

	return requesterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Requester) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no requesters provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(requesterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	requesterInsertCacheMut.RLock()
	cache, cached := requesterInsertCache[key]
	requesterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			requesterAllColumns,
			requesterColumnsWithDefault,
			requesterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(requesterType, requesterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(requesterType, requesterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"requesters\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"requesters\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into requesters")
	}

	if !cached {
		requesterInsertCacheMut.Lock()
		requesterInsertCache[key] = cache
		requesterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Requester.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Requester) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	requesterUpdateCacheMut.RLock()
	cache, cached := requesterUpdateCache[key]
	requesterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			requesterAllColumns,
			requesterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update requesters, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"requesters\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, requesterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(requesterType, requesterMapping, append(wl, requesterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update requesters row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for requesters")
	}

	if !cached {
		requesterUpdateCacheMut.Lock()
		requesterUpdateCache[key] = cache
		requesterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q requesterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for requesters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for requesters")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RequesterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), requesterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"requesters\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, requesterPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in requester slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all requester")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Requester) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no requesters provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(requesterColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	requesterUpsertCacheMut.RLock()
	cache, cached := requesterUpsertCache[key]
	requesterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			requesterAllColumns,
			requesterColumnsWithDefault,
			requesterColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			requesterAllColumns,
			requesterPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert requesters, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(requesterPrimaryKeyColumns))
			copy(conflict, requesterPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"requesters\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(requesterType, requesterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(requesterType, requesterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert requesters")
	}

	if !cached {
		requesterUpsertCacheMut.Lock()
		requesterUpsertCache[key] = cache
		requesterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Requester record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Requester) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Requester provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), requesterPrimaryKeyMapping)
	sql := "DELETE FROM \"requesters\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from requesters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for requesters")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q requesterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no requesterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from requesters")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for requesters")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RequesterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(requesterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), requesterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"requesters\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, requesterPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from requester slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for requesters")
	}

	if len(requesterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Requester) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRequester(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RequesterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RequesterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), requesterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"requesters\".* FROM \"requesters\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, requesterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RequesterSlice")
	}

	*o = slice

	return nil
}

// RequesterExists checks if the Requester row exists.
func RequesterExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"requesters\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if requesters exists")
	}

	return exists, nil
}
