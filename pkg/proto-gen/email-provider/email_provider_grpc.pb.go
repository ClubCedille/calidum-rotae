// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: email_provider.proto

package email_provider

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EmailProvider_SendEmail_FullMethodName = "/email_provider.EmailProvider/SendEmail"
)

// EmailProviderClient is the client API for EmailProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailProviderClient interface {
	// SendEmail sends an email to someone
	SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error)
}

type emailProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailProviderClient(cc grpc.ClientConnInterface) EmailProviderClient {
	return &emailProviderClient{cc}
}

func (c *emailProviderClient) SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error) {
	out := new(SendEmailResponse)
	err := c.cc.Invoke(ctx, EmailProvider_SendEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailProviderServer is the server API for EmailProvider service.
// All implementations must embed UnimplementedEmailProviderServer
// for forward compatibility
type EmailProviderServer interface {
	// SendEmail sends an email to someone
	SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error)
	mustEmbedUnimplementedEmailProviderServer()
}

// UnimplementedEmailProviderServer must be embedded to have forward compatible implementations.
type UnimplementedEmailProviderServer struct {
}

func (UnimplementedEmailProviderServer) SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedEmailProviderServer) mustEmbedUnimplementedEmailProviderServer() {}

// UnsafeEmailProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailProviderServer will
// result in compilation errors.
type UnsafeEmailProviderServer interface {
	mustEmbedUnimplementedEmailProviderServer()
}

func RegisterEmailProviderServer(s grpc.ServiceRegistrar, srv EmailProviderServer) {
	s.RegisterService(&EmailProvider_ServiceDesc, srv)
}

func _EmailProvider_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailProviderServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailProvider_SendEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailProviderServer).SendEmail(ctx, req.(*SendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailProvider_ServiceDesc is the grpc.ServiceDesc for EmailProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "email_provider.EmailProvider",
	HandlerType: (*EmailProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEmail",
			Handler:    _EmailProvider_SendEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "email_provider.proto",
}
