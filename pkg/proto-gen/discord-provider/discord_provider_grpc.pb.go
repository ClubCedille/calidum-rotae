// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: discord_provider.proto

package discord_provider

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DiscordProvider_SendMessage_FullMethodName = "/discord_provider.DiscordProvider/SendMessage"
)

// DiscordProviderClient is the client API for DiscordProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscordProviderClient interface {
	// SendMessage sends a message to a Discord webhook
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
}

type discordProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscordProviderClient(cc grpc.ClientConnInterface) DiscordProviderClient {
	return &discordProviderClient{cc}
}

func (c *discordProviderClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, DiscordProvider_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscordProviderServer is the server API for DiscordProvider service.
// All implementations must embed UnimplementedDiscordProviderServer
// for forward compatibility
type DiscordProviderServer interface {
	// SendMessage sends a message to a Discord webhook
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	mustEmbedUnimplementedDiscordProviderServer()
}

// UnimplementedDiscordProviderServer must be embedded to have forward compatible implementations.
type UnimplementedDiscordProviderServer struct {
}

func (UnimplementedDiscordProviderServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedDiscordProviderServer) mustEmbedUnimplementedDiscordProviderServer() {}

// UnsafeDiscordProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscordProviderServer will
// result in compilation errors.
type UnsafeDiscordProviderServer interface {
	mustEmbedUnimplementedDiscordProviderServer()
}

func RegisterDiscordProviderServer(s grpc.ServiceRegistrar, srv DiscordProviderServer) {
	s.RegisterService(&DiscordProvider_ServiceDesc, srv)
}

func _DiscordProvider_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordProviderServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscordProvider_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordProviderServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiscordProvider_ServiceDesc is the grpc.ServiceDesc for DiscordProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscordProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "discord_provider.DiscordProvider",
	HandlerType: (*DiscordProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _DiscordProvider_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discord_provider.proto",
}
